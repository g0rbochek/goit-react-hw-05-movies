{"version":3,"file":"static/js/352.411a263b.chunk.js","mappings":"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","sources":["components/SearchFilm/SearchFilm.styled.js","apiJs/query.js","components/SearchFilm/SearchFilm.jsx","Pages/Movies.jsx","apiJs/refs.js","components/ErrMassage/ErrMasege.styled.js","components/ErrMassage/ErrMassage.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/ListMovies/ListMovies.styled.js","components/MoviesList/MoviesList.jsx","components/Section/Section.styled.js"],"sourcesContent":["import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const Input = styled(Field)`\n  width: 300px;\n  font-size: 13px;\n  padding: 6px 0 4px 10px;\n  border: 1px solid #cecece;\n  background: #f6f6f6;\n  border-radius: 8px;\n`;\n\nexport const SearchButton = styled.button`\n  font-size: 13px;\n  font-weight: 600;\n  padding: 6px 10px 4px 10px;\n  border: 1px solid #cecece;\n  background: #f6f6f6;\n  border-radius: 8px;\n  margin-top: 40px;\n\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(204, 203, 203);\n  }\n\n  &:active {\n    background-color: rgb(179, 179, 179);\n  }\n`;\n","import axios from 'axios';\nimport { refs } from './refs';\n\nconst END_POINT = `search/movie`;\n\nconst getFilmQuery = async query => {\n  const responce = await axios.get(`${refs.BASE_URL}${END_POINT}`, {\n    params: { api_key: refs.API_KEY, query: query },\n  });\n\n  return responce;\n};\nexport default getFilmQuery;\n","import { Formik, Form } from 'formik';\nimport { Input, SearchButton } from './SearchFilm.styled';\nimport getFilmQuery from '../../apiJs/query';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport FilmItem from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport ErrMessage from 'components/ErrMassage/ErrMassage';\n\nconst SearchFilm = () => {\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState(false);\n  const [films, setFilms] = useState();\n  const [params, setParams] = useSearchParams();\n  // console.log(useSearchParams());\n  const initialValue = {\n    film: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    setParams(values);\n    resetForm();\n  };\n\n  useEffect(() => {\n    const filmQuery = params.get('film');\n\n    const getMoveQuery = async () => {\n      try {\n        setLoader(true);\n        setError(false);\n        const {\n          data: { results },\n        } = await getFilmQuery(filmQuery);\n        setFilms(results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoader(false);\n      }\n    };\n    getMoveQuery(filmQuery);\n  }, [params]);\n\n  return (\n    <div>\n      {loader && <Loader />}\n      {error && <ErrMessage />}\n      <Formik initialValues={initialValue} onSubmit={handleSubmit}>\n        <Form autoComplete=\"off\">\n          <SearchButton type=\"submit\">Search</SearchButton>\n          <Input type=\"text\" name=\"film\" placeholder=\"Enter film...\" />\n          {/* <ErrorMessage name=\"film\" component=\"div\" /> */}\n        </Form>\n      </Formik>\n      {films && <FilmItem films={films} />}\n    </div>\n  );\n};\n\nexport default SearchFilm;\n","import React from 'react';\nimport { Container } from 'components/Container/Container.styled';\nimport { Section } from 'components/Section/Section.styled';\n// import MoveDetails from 'Pages/MovieDetails/MovieDetail';\nimport SearchFilm from 'components/SearchFilm/SearchFilm';\n\nconst Movies = () => {\n  return (\n    <main>\n      <Section>\n        <Container>\n          <SearchFilm />\n        </Container>\n      </Section>\n    </main>\n  );\n};\n\nexport default Movies;\n","export const refs = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  API_KEY: '8151a21e5e94d6656b5dd6100a756468',\n  POSTER_URL: 'https://image.tmdb.org/t/p/w500/',\n};\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`;\n","import React from 'react';\nimport { ErrorText } from './ErrMasege.styled';\n\nconst ErrMessage = () => {\n  return <ErrorText>Error, Please reload this page!</ErrorText>;\n};\n\nexport default ErrMessage;\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`;\n\nexport const LoadMessage = styled.div`\n  margin-bottom: 10px;\n  font-size: large;\n  font-weight: 500;\n`;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport { LoadMessage, LoaderWrap } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <LoadMessage>Loading...</LoadMessage>\n      <InfinitySpin\n        visible={true}\n        height=\"50\"\n        width=\"400\"\n        ariaLabel=\"infinity-spin-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        color=\"#353538\"\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListNameMovies = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n\n  li {\n    border-radius: 10px;\n    background-color: white;\n    padding: 10px;\n    width: 200px;\n    margin-bottom: 10px;\n    font-weight: 600;\n    box-shadow: 0px 2px 1px rgba(46, 47, 66, 0.4),\n      0px 4px 4px rgba(46, 47, 66, 0.4), 0px 6px 6px rgba(46, 47, 66, 0.4);\n    justify-content: center;\n  }\n\n  img {\n    border-radius: 10px;\n    margin-bottom: 5px;\n    display: block;\n  }\n`;\nexport const TitleFilm = styled.div`\n  display: flex;\n  padding: 10px 10px;\n  justify-content: center;\n  align-items: center;\n`;\n","import {\n  ListNameMovies,\n  TitleFilm,\n} from 'components/ListMovies/ListMovies.styled';\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport defaultPhoto from '../../img/noAvailable.jpg';\n\nconst MoviesList = ({ films }) => {\n  const styleLink = {\n    textDecoration: 'none',\n    color: 'black',\n  };\n\n  const location = useLocation();\n  // console.log(location.pathname);\n  return (\n    <ListNameMovies>\n      {films.map(({ id, title, poster_path }) => {\n        return (\n          <li key={id}>\n            <Link\n              style={styleLink}\n              to={`/movies/${id}`}\n              state={{ from: location }}\n            >\n              <div>\n                <img\n                  src={\n                    poster_path\n                      ? ['https://image.tmdb.org/t/p/w500' + poster_path]\n                      : defaultPhoto\n                  }\n                  alt=\"poster\"\n                  width={200}\n                />\n              </div>\n\n              <TitleFilm> {title}</TitleFilm>\n            </Link>\n          </li>\n        );\n      })}\n    </ListNameMovies>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 20px 0;\n`;\n"],"names":["Input","styled","Field","_templateObject","_taggedTemplateLiteral","SearchButton","_templateObject2","getFilmQuery","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","query","responce","_context","prev","next","axios","concat","refs","params","api_key","sent","abrupt","stop","_x","apply","arguments","_useState","useState","_useState2","_slicedToArray","loader","setLoader","_useState3","_useState4","error","setError","_useState5","_useState6","films","setFilms","_useSearchParams","useSearchParams","_useSearchParams2","setParams","useEffect","filmQuery","get","getMoveQuery","_ref2","_yield$getFilmQuery","results","data","t0","finish","_jsxs","children","_jsx","Loader","ErrMessage","Formik","initialValues","film","onSubmit","values","resetForm","Form","autoComplete","type","name","placeholder","FilmItem","Section","Container","SearchFilm","BASE_URL","API_KEY","POSTER_URL","ErrorText","LoaderWrap","LoadMessage","InfinitySpin","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","color","ListNameMovies","TitleFilm","styleLink","textDecoration","location","useLocation","map","id","title","poster_path","Link","style","to","state","from","src","defaultPhoto","alt"],"sourceRoot":""}
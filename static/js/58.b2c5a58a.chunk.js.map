{"version":3,"file":"static/js/58.b2c5a58a.chunk.js","mappings":"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","sources":["apiJs/film.js","components/Section/Section.styled.js","components/AdditInform/AdditInform.styled.js","components/AdditInform/AdditInform.jsx","Pages/MovieDetails/MovieDetail.jsx","apiJs/refs.js","components/ErrMassage/ErrMasege.styled.js","components/ErrMassage/ErrMassage.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\nimport { refs } from './refs';\n\nconst END_POINT = `movie/`;\n\nconst getFilmInfo = async id => {\n  const responce = await axios.get(`${refs.BASE_URL}${END_POINT}${id}`, {\n    params: { api_key: refs.API_KEY },\n  });\n\n  return responce;\n};\nexport default getFilmInfo;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 20px 0;\n`;\n","import styled from 'styled-components';\n\nexport const AdditInformWrap = styled.div`\n  h3 {\n    font-size: large;\n    font-weight: 600;\n    text-align: center;\n  }\n`;\n","import React from 'react';\nimport { AddInfoList } from '../../Pages/MovieDetails/MovieDetails.styled';\nimport { AdditInformWrap } from './AdditInform.styled';\nimport { Link } from 'react-router-dom';\n\nconst AdditInform = () => {\n  return (\n    <AdditInformWrap>\n      <h3>Additional information</h3>\n      <AddInfoList>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </AddInfoList>\n    </AdditInformWrap>\n  );\n};\n\nexport default AdditInform;\n","import React, { Suspense, useRef, useState } from 'react';\nimport {\n  BackLink,\n  FilmPageWrap,\n  Genres,\n  ImgWrap,\n  InfoWrap,\n} from './MovieDetails.styled';\nimport { refs } from '../../apiJs/refs';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport getFilmInfo from '../../apiJs/film';\nimport { useEffect } from 'react';\nimport { Container } from 'components/Container/Container.styled';\nimport { Section } from 'components/Section/Section.styled';\nimport defaultPhoto from '../../img/noAvailable.jpg';\nimport { Loader } from 'components/Loader/Loader';\nimport AdditInform from '../../components/AdditInform/AdditInform';\nimport ErrMessage from 'components/ErrMassage/ErrMassage';\n\nconst MoveDetails = () => {\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState(false);\n  const moveId = useParams();\n  const id = moveId.moviesId;\n  const [film, setFilm] = useState(moveId);\n\n  const { poster_path, title, vote_average, overview, genres = [] } = film;\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state ?? '/');\n\n  // не можу зрозуміти чому в такому варіанті який пропонується не хоче працювати!!!\n\n  //   const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  // показує underfind і викидає на головну сторінку\n\n  // console.log(backLinkLocationRef);\n\n  useEffect(() => {\n    const getFilm = async () => {\n      try {\n        setLoader(true);\n        setError(false);\n        const { data } = await getFilmInfo(id);\n        setFilm(data);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoader(false);\n      }\n    };\n    getFilm(id);\n  }, [id]);\n\n  const urlPoster = refs.POSTER_URL + poster_path;\n\n  return (\n    <main>\n      <Section>\n        {loader && <Loader />}\n        {error && <ErrMessage />}\n        {poster_path && (\n          <Container>\n            <FilmPageWrap>\n              <Link to={backLinkLocationRef.current}>\n                <BackLink>Go Back</BackLink>\n              </Link>\n              <InfoWrap>\n                <ImgWrap>\n                  <img\n                    src={poster_path ? urlPoster : defaultPhoto}\n                    alt=\"films poster\"\n                    width={300}\n                  />\n                </ImgWrap>\n                <div>\n                  <h1>{title}</h1>\n                  <div>\n                    <h2>User Score:</h2>\n                    <p> {Math.ceil(vote_average * 10)}%</p>\n                  </div>\n                  <div>\n                    <h2>Overview:</h2>\n                    <p> {overview}</p>\n                  </div>\n                  <div>\n                    <h2>Genres:</h2>\n                    <Genres>\n                      {genres.map(({ name, id }) => (\n                        <span key={id}>{name}</span>\n                      ))}\n                    </Genres>\n                  </div>\n                </div>\n              </InfoWrap>\n            </FilmPageWrap>\n            <AdditInform />\n            <Suspense>\n              <Outlet />\n            </Suspense>\n          </Container>\n        )}\n      </Section>\n    </main>\n  );\n};\n\nexport default MoveDetails;\n","export const refs = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  API_KEY: '8151a21e5e94d6656b5dd6100a756468',\n  POSTER_URL: 'https://image.tmdb.org/t/p/w500/',\n};\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.div`\n  text-align: center;\n  margin-top: 100px;\n`;\n","import React from 'react';\nimport { ErrorText } from './ErrMasege.styled';\n\nconst ErrMessage = () => {\n  return <ErrorText>Error, Please reload this page!</ErrorText>;\n};\n\nexport default ErrMessage;\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`;\n\nexport const LoadMessage = styled.div`\n  margin-bottom: 10px;\n  font-size: large;\n  font-weight: 500;\n`;\n","import { Hourglass } from 'react-loader-spinner';\nimport { LoadMessage, LoaderWrap } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <LoadMessage>Loading...</LoadMessage>\n      <Hourglass\n        visible={true}\n        height=\"50\"\n        width=\"50\"\n        ariaLabel=\"hourglass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        colors={['#306cce', '#72a1ed']}\n      />\n    </LoaderWrap>\n  );\n};\n"],"names":["getFilmInfo","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","id","responce","_context","prev","next","axios","concat","refs","params","api_key","sent","abrupt","stop","_x","apply","arguments","Section","styled","_templateObject","_taggedTemplateLiteral","AdditInformWrap","_jsxs","children","_jsx","AddInfoList","Link","to","_location$state","_useState","useState","_useState2","_slicedToArray","loader","setLoader","_useState3","_useState4","error","setError","moveId","useParams","moviesId","_useState5","_useState6","film","setFilm","poster_path","title","vote_average","overview","_film$genres","genres","location","useLocation","backLinkLocationRef","useRef","state","useEffect","getFilm","_yield$getFilmInfo","data","t0","finish","urlPoster","Loader","ErrMessage","Container","FilmPageWrap","current","BackLink","InfoWrap","ImgWrap","src","defaultPhoto","alt","width","Math","ceil","Genres","map","_ref2","name","AdditInform","Suspense","Outlet","BASE_URL","API_KEY","POSTER_URL","ErrorText","LoaderWrap","LoadMessage","_templateObject2","Hourglass","visible","height","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}